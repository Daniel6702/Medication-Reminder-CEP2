Error adding device: <!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE">
  <title>DataError
          at /api/device/</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background-color:#fff; color:#000; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    code, pre { font-size: 100%; white-space: pre-wrap; word-break: break-word; }
    summary { cursor: pointer; }
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
    }
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 10px 2px 40px; width: auto; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%; }
    table td.code pre { overflow:hidden; }
    table.source th { color:#666; }
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; color: #222; }
    ul.traceback li.cause { word-break: break-word; }
    ul.traceback li.frame { padding-bottom:1em; color:#4f4f4f; }
    ul.traceback li.user { background-color:#e0e0e0; color:#000 }
    div.context { padding:10px 0; overflow:hidden; }
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }
    div.context ol li pre { display:inline; }
    div.context ol.context-line li { color:#464646; background-color:#dfdfdf; padding: 3px 2px; }
    div.context ol.context-line li span { position:absolute; right:32px; }
    .user div.context ol.context-line li { background-color:#bbb; color:#000; }
    .user div.context ol li { color:#666; }
    div.commands, summary.commands { margin-left: 40px; }
    div.commands a, summary.commands { color:#555; text-decoration:none; }
    .user div.commands a { color: black; }
    #summary { background: #ffc; }
    #summary h2 { font-weight: normal; color: #666; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 10px 20px; }
    #template-not-exist .postmortem-section { margin-bottom: 3px; }
    #unicode-hint { background:#eee; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
    h2 span.commands { font-size:.7em; font-weight:normal; }
    span.commands a:link {color:#5E5694;}
    pre.exception_value { font-family: sans-serif; color: #575757; font-size: 1.5em; margin: 10px 0 10px 0; }
    .append-bottom { margin-bottom: 10px; }
    .fname { user-select: all; }
  </style>
  
  <script>
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(document.querySelectorAll('ol.pre-context'));
      hideAll(document.querySelectorAll('ol.post-context'));
      hideAll(document.querySelectorAll('div.pastebin'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
        }
      }
      return false;
    }
    function switchPastebinFriendly(link) {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.textContent = link.textContent.trim() == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback');
      return false;
    }
  </script>
  
</head>
<body>
<div id="summary">
  <h1>DataError
       at /api/device/</h1>
  <pre class="exception_value">(1406, &quot;Data too long for column &#x27;type&#x27; at row 1&quot;)</pre>
  <table class="meta">

    <tr>
      <th>Request Method:</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Request URL:</th>
      <td>http://localhost:8000/api/device/</td>
    </tr>

    <tr>
      <th>Django Version:</th>
      <td>5.0.4</td>
    </tr>

    <tr>
      <th>Exception Type:</th>
      <td>DataError</td>
    </tr>


    <tr>
      <th>Exception Value:</th>
      <td><pre>(1406, &quot;Data too long for column &#x27;type&#x27; at row 1&quot;)</pre></td>
    </tr>


    <tr>
      <th>Exception Location:</th>
      <td><span class="fname">/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/connections.py</span>, line 261, in query</td>
    </tr>


    <tr>
      <th>Raised during:</th>
      <td>MediRemind_WebApp.views.DeviceAPIView</td>
    </tr>

    <tr>
      <th>Python Executable:</th>
      <td>/home/peder/myvenv/bin/python</td>
    </tr>
    <tr>
      <th>Python Version:</th>
      <td>3.11.2</td>
    </tr>
    <tr>
      <th>Python Path:</th>
      <td><pre>[&#x27;/home/peder/Medication-Reminder-CEP2/Django Webserver&#x27;,
 &#x27;/usr/lib/python311.zip&#x27;,
 &#x27;/usr/lib/python3.11&#x27;,
 &#x27;/usr/lib/python3.11/lib-dynload&#x27;,
 &#x27;/home/peder/myvenv/lib/python3.11/site-packages&#x27;]</pre></td>
    </tr>
    <tr>
      <th>Server time:</th>
      <td>Wed, 10 Apr 2024 19:45:49 +0000</td>
    </tr>
  </table>
</div>




<div id="traceback">
  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">
    Switch to copy-and-paste view</a></span>
  </h2>
  <div id="browserTraceback">
    <ul class="traceback">
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py</code>, line 105, in _execute
          

          
            <div class="context" id="c4111348648">
              
                <ol start="98" class="pre-context" id="pre4111348648">
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>        with self.db.wrap_database_errors:</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>            if params is None:</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>                # params default might be backend specific.</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>                return self.cursor.execute(sql)</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>            else:</pre></li>
                
                </ol>
              
              <ol start="105" class="context-line">
                <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>                return self.cursor.execute(sql, params)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='106' class="post-context" id="post4111348648">
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>    def _executemany(self, sql, param_list, *ignored_wrapper_args):</pre></li>
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>        # Raise a warning during app initialization (stored_app_configs is only</pre></li>
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>        # ever set during testing).</pre></li>
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>        if not apps.ready and not apps.stored_app_configs:</pre></li>
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111348648">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>ignored_wrapper_args</td>
                    <td class="code"><pre>(False,
 {&#x27;connection&#x27;: &lt;DatabaseWrapper vendor=&#x27;mysql&#x27; alias=&#x27;default&#x27;&gt;,
  &#x27;cursor&#x27;: &lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;})</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>(2,
 UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;),
 &#x27;0x00158d000548bafd&#x27;,
 &#x27;No Tape&#x27;,
 &#x27;PIR_SENSOR&#x27;,
 &#x27;Default status&#x27;,
 None)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>(&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`, &#x27;
 &#x27;`name`, `type`, `status`, `room_id`) VALUES (%s, %s, %s, %s, %s, %s, %s)&#x27;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/mysql/base.py</code>, line 76, in execute
          

          
            <div class="context" id="c4111348584">
              
                <ol start="69" class="pre-context" id="pre4111348584">
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>    def __init__(self, cursor):</pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>        self.cursor = cursor</pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>    def execute(self, query, args=None):</pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            # args is None means no string interpolation</pre></li>
                
                </ol>
              
              <ol start="76" class="context-line">
                <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            return self.cursor.execute(query, args)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='77' class="post-context" id="post4111348584">
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>        except Database.OperationalError as e:</pre></li>
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>                raise IntegrityError(*tuple(e.args))</pre></li>
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            raise</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111348584">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(2,
 UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;),
 &#x27;0x00158d000548bafd&#x27;,
 &#x27;No Tape&#x27;,
 &#x27;PIR_SENSOR&#x27;,
 &#x27;Default status&#x27;,
 None)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>(&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`, &#x27;
 &#x27;`name`, `type`, `status`, `room_id`) VALUES (%s, %s, %s, %s, %s, %s, %s)&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0xf50e3d90&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/cursors.py</code>, line 179, in execute
          

          
            <div class="context" id="c4111351720">
              
                <ol start="172" class="pre-context" id="pre4111351720">
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        Returns integer represents rows affected, if any</pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        self._discard()</pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        mogrified_query = self._mogrify(query, args)</pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        assert isinstance(mogrified_query, (bytes, bytearray))</pre></li>
                
                </ol>
              
              <ol start="179" class="context-line">
                <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        res = self._query(mogrified_query)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='180' class="post-context" id="post4111351720">
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        return res</pre></li>
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>    def _mogrify(self, query, args=None):</pre></li>
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        &quot;&quot;&quot;Return query after binding args.&quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        db = self._get_db()</pre></li>
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111351720">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(2,
 UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;),
 &#x27;0x00158d000548bafd&#x27;,
 &#x27;No Tape&#x27;,
 &#x27;PIR_SENSOR&#x27;,
 &#x27;Default status&#x27;,
 None)</pre></td>
                  </tr>
                
                  <tr>
                    <td>mogrified_query</td>
                    <td class="code"><pre>(b&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`,&#x27;
 b&quot; `name`, `type`, `status`, `room_id`) VALUES (2, &#x27;87d00aa4-f0e5-4b27-ad44-d3&quot;
 b&quot;9d3381b019&#x27;, &#x27;0x00158d000548bafd&#x27;, &#x27;No Tape&#x27;, &#x27;PIR_SENSOR&#x27;, &#x27;Default status&#x27;&quot;
 b&#x27;, NULL)&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>(&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`, &#x27;
 &#x27;`name`, `type`, `status`, `room_id`) VALUES (%s, %s, %s, %s, %s, %s, %s)&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MySQLdb.cursors.Cursor object at 0xf50e3ef0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/cursors.py</code>, line 330, in _query
          

          
            <div class="context" id="c4111349576">
              
                <ol start="323" class="pre-context" id="pre4111349576">
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        return args</pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>    def _query(self, q):</pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        db = self._get_db()</pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self._result = None</pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self.rowcount = None</pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self.lastrowid = None</pre></li>
                
                </ol>
              
              <ol start="330" class="context-line">
                <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        db.query(q)
             ^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='331' class="post-context" id="post4111349576">
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self._do_get_result(db)</pre></li>
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self._post_get_result()</pre></li>
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self._executed = q</pre></li>
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        return self.rowcount</pre></li>
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>    def _fetch_row(self, size=1):</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111349576">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>db</td>
                    <td class="code"><pre>&lt;_mysql.connection open to &#x27;localhost&#x27; at 0xf470d6a8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>q</td>
                    <td class="code"><pre>(b&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`,&#x27;
 b&quot; `name`, `type`, `status`, `room_id`) VALUES (2, &#x27;87d00aa4-f0e5-4b27-ad44-d3&quot;
 b&quot;9d3381b019&#x27;, &#x27;0x00158d000548bafd&#x27;, &#x27;No Tape&#x27;, &#x27;PIR_SENSOR&#x27;, &#x27;Default status&#x27;&quot;
 b&#x27;, NULL)&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MySQLdb.cursors.Cursor object at 0xf50e3ef0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/connections.py</code>, line 261, in query
          

          
            <div class="context" id="c4111350280">
              
                <ol start="254" class="pre-context" id="pre4111350280">
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        return (cursorclass or self.cursorclass)(self)</pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>    def query(self, query):</pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        # Since _mysql releases GIL while querying, we need immutable buffer.</pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        if isinstance(query, bytearray):</pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>            query = bytes(query)</pre></li>
                
                </ol>
              
              <ol start="261" class="context-line">
                <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        _mysql.connection.query(self, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='262' class="post-context" id="post4111350280">
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>    def _bytes_literal(self, bs):</pre></li>
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        assert isinstance(bs, (bytes, bytearray))</pre></li>
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        x = self.string_literal(bs)  # x is escaped and quoted bytes</pre></li>
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        if self._binary_prefix:</pre></li>
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>            return b&quot;_binary&quot; + x</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111350280">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>(b&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`,&#x27;
 b&quot; `name`, `type`, `status`, `room_id`) VALUES (2, &#x27;87d00aa4-f0e5-4b27-ad44-d3&quot;
 b&quot;9d3381b019&#x27;, &#x27;0x00158d000548bafd&#x27;, &#x27;No Tape&#x27;, &#x27;PIR_SENSOR&#x27;, &#x27;Default status&#x27;&quot;
 b&#x27;, NULL)&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;_mysql.connection open to &#x27;localhost&#x27; at 0xf470d6a8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
          <li class="cause"><h3>
          
            The above exception ((1406, &quot;Data too long for column &#x27;type&#x27; at row 1&quot;)) was the direct cause of the following exception:
          
        </h3></li>
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/core/handlers/exception.py</code>, line 55, in inner
          

          
            <div class="context" id="c4111348200">
              
                <ol start="48" class="pre-context" id="pre4111348200">
                
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre>        return inner</pre></li>
                
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre>    else:</pre></li>
                
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre>        @wraps(get_response)</pre></li>
                
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre>        def inner(request):</pre></li>
                
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="55" class="context-line">
                <li onclick="toggle('pre4111348200', 'post4111348200')"><pre>                response = get_response(request)
                               ^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='56' class="post-context" id="post4111348200">
                  
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre>            except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre>                response = response_for_exception(request, exc)</pre></li>
                  
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre>            return response</pre></li>
                  
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre>        return inner</pre></li>
                  
                  <li onclick="toggle('pre4111348200', 'post4111348200')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111348200">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>DataError(1406, &quot;Data too long for column &#x27;type&#x27; at row 1&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>get_response</td>
                    <td class="code"><pre>&lt;bound method BaseHandler._get_response of &lt;django.core.handlers.wsgi.WSGIHandler object at 0xf60fff70&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#x27;/api/device/&#x27;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/core/handlers/base.py</code>, line 197, in _get_response
          

          
            <div class="context" id="c4111349864">
              
                <ol start="190" class="pre-context" id="pre4111349864">
                
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>            # If it is an asynchronous view, run it in a subthread.</pre></li>
                
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>            if iscoroutinefunction(wrapped_callback):</pre></li>
                
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>                wrapped_callback = async_to_sync(wrapped_callback)</pre></li>
                
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="197" class="context-line">
                <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>                response = wrapped_callback(request, *callback_args, **callback_kwargs)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='198' class="post-context" id="post4111349864">
                  
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>            except Exception as e:</pre></li>
                  
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>                response = self.process_exception_by_middleware(e, request)</pre></li>
                  
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>                if response is None:</pre></li>
                  
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>                    raise</pre></li>
                  
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111349864', 'post4111349864')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111349864">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function View.as_view.&lt;locals&gt;.view at 0xf51e3b18&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;CsrfViewMiddleware get_response=convert_exception_to_response.&lt;locals&gt;.inner&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#x27;/api/device/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0xf60fff70&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function View.as_view.&lt;locals&gt;.view at 0xf51e3b18&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/views/decorators/csrf.py</code>, line 65, in _view_wrapper
          

          
            <div class="context" id="c4111347784">
              
                <ol start="58" class="pre-context" id="pre4111347784">
                
                  <li onclick="toggle('pre4111347784', 'post4111347784')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111347784', 'post4111347784')"><pre>        async def _view_wrapper(request, *args, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre4111347784', 'post4111347784')"><pre>            return await view_func(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre4111347784', 'post4111347784')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111347784', 'post4111347784')"><pre>    else:</pre></li>
                
                  <li onclick="toggle('pre4111347784', 'post4111347784')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111347784', 'post4111347784')"><pre>        def _view_wrapper(request, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="65" class="context-line">
                <li onclick="toggle('pre4111347784', 'post4111347784')"><pre>            return view_func(request, *args, **kwargs)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='66' class="post-context" id="post4111347784">
                  
                  <li onclick="toggle('pre4111347784', 'post4111347784')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111347784', 'post4111347784')"><pre>    _view_wrapper.csrf_exempt = True</pre></li>
                  
                  <li onclick="toggle('pre4111347784', 'post4111347784')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111347784', 'post4111347784')"><pre>    return wraps(view_func)(_view_wrapper)</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111347784">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#x27;/api/device/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>view_func</td>
                    <td class="code"><pre>&lt;function View.as_view.&lt;locals&gt;.view at 0xf51e3ac8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/views/generic/base.py</code>, line 104, in view
          

          
            <div class="context" id="c4111320072">
              
                <ol start="97" class="pre-context" id="pre4111320072">
                
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>            self = cls(**initkwargs)</pre></li>
                
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>            self.setup(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>            if not hasattr(self, &quot;request&quot;):</pre></li>
                
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>                raise AttributeError(</pre></li>
                
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>                    &quot;%s instance has no &#x27;request&#x27; attribute. Did you override &quot;</pre></li>
                
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>                    &quot;setup() and forget to call super()?&quot; % cls.__name__</pre></li>
                
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>                )</pre></li>
                
                </ol>
              
              <ol start="104" class="context-line">
                <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>            return self.dispatch(request, *args, **kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='105' class="post-context" id="post4111320072">
                  
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>        view.view_class = cls</pre></li>
                  
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>        view.view_initkwargs = initkwargs</pre></li>
                  
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>        # __name__ and __qualname__ are intentionally left unchanged as</pre></li>
                  
                  <li onclick="toggle('pre4111320072', 'post4111320072')"><pre>        # view_class should be used to robustly determine the name of the view</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111320072">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#x27;MediRemind_WebApp.views.APIViews.DeviceAPIView&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>initkwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#x27;/api/device/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MediRemind_WebApp.views.APIViews.DeviceAPIView object at 0xf50dcb10&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/views.py</code>, line 509, in dispatch
          

          
            <div class="context" id="c4111348168">
              
                <ol start="502" class="pre-context" id="pre4111348168">
                
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre>            response = handler(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre>        except Exception as exc:</pre></li>
                
                </ol>
              
              <ol start="509" class="context-line">
                <li onclick="toggle('pre4111348168', 'post4111348168')"><pre>            response = self.handle_exception(exc)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='510' class="post-context" id="post4111348168">
                  
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre>        return self.response</pre></li>
                  
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre>    def options(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre4111348168', 'post4111348168')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111348168">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method APIViews.DeviceAPIView.post of &lt;MediRemind_WebApp.views.APIViews.DeviceAPIView object at 0xf50dcb10&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request: POST &#x27;/api/device/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MediRemind_WebApp.views.APIViews.DeviceAPIView object at 0xf50dcb10&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/views.py</code>, line 469, in handle_exception
          

          
            <div class="context" id="c4111351560">
              
                <ol start="462" class="pre-context" id="pre4111351560">
                
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre>        exception_handler = self.get_exception_handler()</pre></li>
                
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre>        context = self.get_exception_handler_context()</pre></li>
                
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre>        response = exception_handler(exc, context)</pre></li>
                
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="469" class="context-line">
                <li onclick="toggle('pre4111351560', 'post4111351560')"><pre>            self.raise_uncaught_exception(exc)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='470' class="post-context" id="post4111351560">
                  
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre>        response.exception = True</pre></li>
                  
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre>    def raise_uncaught_exception(self, exc):</pre></li>
                  
                  <li onclick="toggle('pre4111351560', 'post4111351560')"><pre>        if settings.DEBUG:</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111351560">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>context</td>
                    <td class="code"><pre>{&#x27;args&#x27;: (),
 &#x27;kwargs&#x27;: {},
 &#x27;request&#x27;: &lt;rest_framework.request.Request: POST &#x27;/api/device/&#x27;&gt;,
 &#x27;view&#x27;: &lt;MediRemind_WebApp.views.APIViews.DeviceAPIView object at 0xf50dcb10&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>DataError(1406, &quot;Data too long for column &#x27;type&#x27; at row 1&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>exception_handler</td>
                    <td class="code"><pre>&lt;function exception_handler at 0xf522eca8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MediRemind_WebApp.views.APIViews.DeviceAPIView object at 0xf50dcb10&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/views.py</code>, line 480, in raise_uncaught_exception
          

          
            <div class="context" id="c4111347976">
              
                <ol start="473" class="pre-context" id="pre4111347976">
                
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>    def raise_uncaught_exception(self, exc):</pre></li>
                
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>        if settings.DEBUG:</pre></li>
                
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>            request = self.request</pre></li>
                
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>            renderer_format = getattr(request.accepted_renderer, &#x27;format&#x27;)</pre></li>
                
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>            use_plaintext_traceback = renderer_format not in (&#x27;html&#x27;, &#x27;api&#x27;, &#x27;admin&#x27;)</pre></li>
                
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>            request.force_plaintext_errors(use_plaintext_traceback)</pre></li>
                
                </ol>
              
              <ol start="480" class="context-line">
                <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>        raise exc
             ^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='481' class="post-context" id="post4111347976">
                  
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>    # Note: Views are made CSRF exempt from within `as_view` as to prevent</pre></li>
                  
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>    # accidental removal of this exemption in cases where `dispatch` needs to</pre></li>
                  
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>    # be overridden.</pre></li>
                  
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>    def dispatch(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre4111347976', 'post4111347976')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111347976">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>DataError(1406, &quot;Data too long for column &#x27;type&#x27; at row 1&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>renderer_format</td>
                    <td class="code"><pre>&#x27;json&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request: POST &#x27;/api/device/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MediRemind_WebApp.views.APIViews.DeviceAPIView object at 0xf50dcb10&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>use_plaintext_traceback</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/views.py</code>, line 506, in dispatch
          

          
            <div class="context" id="c4111351272">
              
                <ol start="499" class="pre-context" id="pre4111351272">
                
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre>            # Get the appropriate handler method</pre></li>
                
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre>            if request.method.lower() in self.http_method_names:</pre></li>
                
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre>                handler = getattr(self, request.method.lower(),</pre></li>
                
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre></pre></li>
                
                </ol>
              
              <ol start="506" class="context-line">
                <li onclick="toggle('pre4111351272', 'post4111351272')"><pre>            response = handler(request, *args, **kwargs)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='507' class="post-context" id="post4111351272">
                  
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre>            response = self.handle_exception(exc)</pre></li>
                  
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre4111351272', 'post4111351272')"><pre>        return self.response</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111351272">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method APIViews.DeviceAPIView.post of &lt;MediRemind_WebApp.views.APIViews.DeviceAPIView object at 0xf50dcb10&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request: POST &#x27;/api/device/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MediRemind_WebApp.views.APIViews.DeviceAPIView object at 0xf50dcb10&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/Medication-Reminder-CEP2/Django Webserver/MediRemind_WebApp/views.py</code>, line 224, in post
          

          
            <div class="context" id="c4111350568">
              
                <ol start="217" class="pre-context" id="pre4111350568">
                
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>            devices = Device.objects.filter(user=request.user)</pre></li>
                
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>            serializer = DeviceSerializer(devices, many=True)</pre></li>
                
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>            return Response(serializer.data)</pre></li>
                
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>        def post(self, request):</pre></li>
                
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>            serializer = DeviceSerializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>            if serializer.is_valid():</pre></li>
                
                </ol>
              
              <ol start="224" class="context-line">
                <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>                serializer.save(user=request.user)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='225' class="post-context" id="post4111350568">
                  
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>                return Response(serializer.data, status=status.HTTP_201_CREATED)</pre></li>
                  
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</pre></li>
                  
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>        def delete(self, request, device_id):</pre></li>
                  
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>            device = Device.objects.get(device_id=device_id)</pre></li>
                  
                  <li onclick="toggle('pre4111350568', 'post4111350568')"><pre>            device.delete()</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111350568">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request: POST &#x27;/api/device/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MediRemind_WebApp.views.APIViews.DeviceAPIView object at 0xf50dcb10&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>DeviceSerializer(data={&#x27;device_id&#x27;: None, &#x27;zigbee_id&#x27;: &#x27;0x00158d000548bafd&#x27;, &#x27;name&#x27;: &#x27;No Tape&#x27;, &#x27;type&#x27;: &#x27;PIR_SENSOR&#x27;, &#x27;user&#x27;: None, &#x27;status&#x27;: &#x27;Default status&#x27;, &#x27;room&#x27;: None}):
    device_id = UUIDField(read_only=True)
    zigbee_id = CharField(max_length=50)
    name = CharField(max_length=100)
    type = ChoiceField(choices=[(&#x27;PIR_SENSOR&#x27;, &#x27;Passive Infrared&#x27;), (&#x27;VIBRATION_SENSOR&#x27;, &#x27;Vibration&#x27;), (&#x27;RGB_STRIP&#x27;, &#x27;RGB Light&#x27;), (&#x27;SWITCH&#x27;, &#x27;Switch&#x27;)])
    status = CharField(max_length=50)
    user = PrimaryKeyRelatedField(allow_null=True, queryset=User.objects.all(), required=False)
    room = PrimaryKeyRelatedField(allow_null=True, queryset=Room.objects.all(), required=False)</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/serializers.py</code>, line 208, in save
          

          
            <div class="context" id="c4111348808">
              
                <ol start="201" class="pre-context" id="pre4111348808">
                
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre>        if self.instance is not None:</pre></li>
                
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre>            self.instance = self.update(self.instance, validated_data)</pre></li>
                
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre>            assert self.instance is not None, (</pre></li>
                
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre>                &#x27;`update()` did not return an object instance.&#x27;</pre></li>
                
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre>        else:</pre></li>
                
                </ol>
              
              <ol start="208" class="context-line">
                <li onclick="toggle('pre4111348808', 'post4111348808')"><pre>            self.instance = self.create(validated_data)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='209' class="post-context" id="post4111348808">
                  
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre>            assert self.instance is not None, (</pre></li>
                  
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre>                &#x27;`create()` did not return an object instance.&#x27;</pre></li>
                  
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre>            )</pre></li>
                  
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre>        return self.instance</pre></li>
                  
                  <li onclick="toggle('pre4111348808', 'post4111348808')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111348808">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;user&#x27;: &lt;User: TESTUSER1&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>DeviceSerializer(data={&#x27;device_id&#x27;: None, &#x27;zigbee_id&#x27;: &#x27;0x00158d000548bafd&#x27;, &#x27;name&#x27;: &#x27;No Tape&#x27;, &#x27;type&#x27;: &#x27;PIR_SENSOR&#x27;, &#x27;user&#x27;: None, &#x27;status&#x27;: &#x27;Default status&#x27;, &#x27;room&#x27;: None}):
    device_id = UUIDField(read_only=True)
    zigbee_id = CharField(max_length=50)
    name = CharField(max_length=100)
    type = ChoiceField(choices=[(&#x27;PIR_SENSOR&#x27;, &#x27;Passive Infrared&#x27;), (&#x27;VIBRATION_SENSOR&#x27;, &#x27;Vibration&#x27;), (&#x27;RGB_STRIP&#x27;, &#x27;RGB Light&#x27;), (&#x27;SWITCH&#x27;, &#x27;Switch&#x27;)])
    status = CharField(max_length=50)
    user = PrimaryKeyRelatedField(allow_null=True, queryset=User.objects.all(), required=False)
    room = PrimaryKeyRelatedField(allow_null=True, queryset=Room.objects.all(), required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{&#x27;name&#x27;: &#x27;No Tape&#x27;,
 &#x27;room&#x27;: None,
 &#x27;status&#x27;: &#x27;Default status&#x27;,
 &#x27;type&#x27;: &#x27;PIR_SENSOR&#x27;,
 &#x27;user&#x27;: &lt;User: TESTUSER1&gt;,
 &#x27;zigbee_id&#x27;: &#x27;0x00158d000548bafd&#x27;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/serializers.py</code>, line 989, in create
          

          
            <div class="context" id="c4111351496">
              
                <ol start="982" class="pre-context" id="pre4111351496">
                
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>        info = model_meta.get_field_info(ModelClass)</pre></li>
                
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>        many_to_many = {}</pre></li>
                
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>        for field_name, relation_info in info.relations.items():</pre></li>
                
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>            if relation_info.to_many and (field_name in validated_data):</pre></li>
                
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>                many_to_many[field_name] = validated_data.pop(field_name)</pre></li>
                
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="989" class="context-line">
                <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>            instance = ModelClass._default_manager.create(**validated_data)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='990' class="post-context" id="post4111351496">
                  
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>        except TypeError:</pre></li>
                  
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>            tb = traceback.format_exc()</pre></li>
                  
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>            msg = (</pre></li>
                  
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>                &#x27;Got a `TypeError` when calling `%s.%s.create()`. &#x27;</pre></li>
                  
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>                &#x27;This may be because you have a writable field on the &#x27;</pre></li>
                  
                  <li onclick="toggle('pre4111351496', 'post4111351496')"><pre>                &#x27;serializer class that is not a valid argument to &#x27;</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111351496">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>ModelClass</td>
                    <td class="code"><pre>&lt;class &#x27;MediRemind_WebApp.models.Device&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>field_name</td>
                    <td class="code"><pre>&#x27;room&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>info</td>
                    <td class="code"><pre>FieldInfo(pk=&lt;django.db.models.fields.UUIDField: device_id&gt;, fields={&#x27;zigbee_id&#x27;: &lt;django.db.models.fields.CharField: zigbee_id&gt;, &#x27;name&#x27;: &lt;django.db.models.fields.CharField: name&gt;, &#x27;type&#x27;: &lt;django.db.models.fields.CharField: type&gt;, &#x27;status&#x27;: &lt;django.db.models.fields.CharField: status&gt;}, forward_relations={&#x27;user&#x27;: RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: user&gt;, related_model=&lt;class &#x27;django.contrib.auth.models.User&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False), &#x27;room&#x27;: RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: room&gt;, related_model=&lt;class &#x27;MediRemind_WebApp.models.Room&#x27;&gt;, to_many=False, to_field=&#x27;room_id&#x27;, has_through_model=False, reverse=False)}, reverse_relations={}, fields_and_pk={&#x27;pk&#x27;: &lt;django.db.models.fields.UUIDField: device_id&gt;, &#x27;device_id&#x27;: &lt;django.db.models.fields.UUIDField: device_id&gt;, &#x27;zigbee_id&#x27;: &lt;django.db.models.fields.CharField: zigbee_id&gt;, &#x27;name&#x27;: &lt;django.db.models.fields.CharField: name&gt;, &#x27;type&#x27;: &lt;django.db.models.fields.CharField: type&gt;, &#x27;status&#x27;: &lt;django.db.models.fields.CharField: status&gt;}, relations={&#x27;user&#x27;: RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: user&gt;, related_model=&lt;class &#x27;django.contrib.auth.models.User&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False), &#x27;room&#x27;: RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: room&gt;, related_model=&lt;class &#x27;MediRemind_WebApp.models.Room&#x27;&gt;, to_many=False, to_field=&#x27;room_id&#x27;, has_through_model=False, reverse=False)})</pre></td>
                  </tr>
                
                  <tr>
                    <td>many_to_many</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>relation_info</td>
                    <td class="code"><pre>RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: room&gt;, related_model=&lt;class &#x27;MediRemind_WebApp.models.Room&#x27;&gt;, to_many=False, to_field=&#x27;room_id&#x27;, has_through_model=False, reverse=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>DeviceSerializer(data={&#x27;device_id&#x27;: None, &#x27;zigbee_id&#x27;: &#x27;0x00158d000548bafd&#x27;, &#x27;name&#x27;: &#x27;No Tape&#x27;, &#x27;type&#x27;: &#x27;PIR_SENSOR&#x27;, &#x27;user&#x27;: None, &#x27;status&#x27;: &#x27;Default status&#x27;, &#x27;room&#x27;: None}):
    device_id = UUIDField(read_only=True)
    zigbee_id = CharField(max_length=50)
    name = CharField(max_length=100)
    type = ChoiceField(choices=[(&#x27;PIR_SENSOR&#x27;, &#x27;Passive Infrared&#x27;), (&#x27;VIBRATION_SENSOR&#x27;, &#x27;Vibration&#x27;), (&#x27;RGB_STRIP&#x27;, &#x27;RGB Light&#x27;), (&#x27;SWITCH&#x27;, &#x27;Switch&#x27;)])
    status = CharField(max_length=50)
    user = PrimaryKeyRelatedField(allow_null=True, queryset=User.objects.all(), required=False)
    room = PrimaryKeyRelatedField(allow_null=True, queryset=Room.objects.all(), required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{&#x27;name&#x27;: &#x27;No Tape&#x27;,
 &#x27;room&#x27;: None,
 &#x27;status&#x27;: &#x27;Default status&#x27;,
 &#x27;type&#x27;: &#x27;PIR_SENSOR&#x27;,
 &#x27;user&#x27;: &lt;User: TESTUSER1&gt;,
 &#x27;zigbee_id&#x27;: &#x27;0x00158d000548bafd&#x27;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/manager.py</code>, line 87, in manager_method
          

          
            <div class="context" id="c4111348008">
              
                <ol start="80" class="pre-context" id="pre4111348008">
                
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre>            @wraps(method)</pre></li>
                
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="87" class="context-line">
                <li onclick="toggle('pre4111348008', 'post4111348008')"><pre>                return getattr(self.get_queryset(), name)(*args, **kwargs)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='88' class="post-context" id="post4111348008">
                  
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre>        for name, method in inspect.getmembers(</pre></li>
                  
                  <li onclick="toggle('pre4111348008', 'post4111348008')"><pre>            queryset_class, predicate=inspect.isfunction</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111348008">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;name&#x27;: &#x27;No Tape&#x27;,
 &#x27;room&#x27;: None,
 &#x27;status&#x27;: &#x27;Default status&#x27;,
 &#x27;type&#x27;: &#x27;PIR_SENSOR&#x27;,
 &#x27;user&#x27;: &lt;User: TESTUSER1&gt;,
 &#x27;zigbee_id&#x27;: &#x27;0x00158d000548bafd&#x27;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#x27;create&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0xf5c94a50&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/query.py</code>, line 679, in create
          

          
            <div class="context" id="c4111349544">
              
                <ol start="672" class="pre-context" id="pre4111349544">
                
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre>            raise ValueError(</pre></li>
                
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre>                &quot;The following fields do not exist in this model: %s&quot;</pre></li>
                
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre>                % &quot;, &quot;.join(reverse_one_to_one_fields)</pre></li>
                
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre>        obj = self.model(**kwargs)</pre></li>
                
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre>        self._for_write = True</pre></li>
                
                </ol>
              
              <ol start="679" class="context-line">
                <li onclick="toggle('pre4111349544', 'post4111349544')"><pre>        obj.save(force_insert=True, using=self.db)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='680' class="post-context" id="post4111349544">
                  
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre>        return obj</pre></li>
                  
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre>    async def acreate(self, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre>        return await sync_to_async(self.create)(**kwargs)</pre></li>
                  
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111349544', 'post4111349544')"><pre>    def _prepare_for_bulk_create(self, objs):</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111349544">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;name&#x27;: &#x27;No Tape&#x27;,
 &#x27;room&#x27;: None,
 &#x27;status&#x27;: &#x27;Default status&#x27;,
 &#x27;type&#x27;: &#x27;PIR_SENSOR&#x27;,
 &#x27;user&#x27;: &lt;User: TESTUSER1&gt;,
 &#x27;zigbee_id&#x27;: &#x27;0x00158d000548bafd&#x27;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;Device: PIR_SENSOR Device 87d00aa4-f0e5-4b27-ad44-d39d3381b019 at None&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>reverse_one_to_one_fields</td>
                    <td class="code"><pre>frozenset()</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet []&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/base.py</code>, line 822, in save
          

          
            <div class="context" id="c4111350472">
              
                <ol start="815" class="pre-context" id="pre4111350472">
                
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>            for field in self._meta.concrete_fields:</pre></li>
                
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>                if not field.primary_key and not hasattr(field, &quot;through&quot;):</pre></li>
                
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>                    field_names.add(field.attname)</pre></li>
                
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>            loaded_fields = field_names.difference(deferred_non_generated_fields)</pre></li>
                
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>            if loaded_fields:</pre></li>
                
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>                update_fields = frozenset(loaded_fields)</pre></li>
                
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre></pre></li>
                
                </ol>
              
              <ol start="822" class="context-line">
                <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>        self.save_base(
             ^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='823' class="post-context" id="post4111350472">
                  
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>            using=using,</pre></li>
                  
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>            force_insert=force_insert,</pre></li>
                  
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>            force_update=force_update,</pre></li>
                  
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>            update_fields=update_fields,</pre></li>
                  
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre>        )</pre></li>
                  
                  <li onclick="toggle('pre4111350472', 'post4111350472')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111350472">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>deferred_non_generated_fields</td>
                    <td class="code"><pre>set()</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Device: PIR_SENSOR Device 87d00aa4-f0e5-4b27-ad44-d39d3381b019 at None&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#x27;default&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/base.py</code>, line 909, in save_base
          

          
            <div class="context" id="c4111347880">
              
                <ol start="902" class="pre-context" id="pre4111347880">
                
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>            parent_inserted = False</pre></li>
                
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>            if not raw:</pre></li>
                
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>                # Validate force insert only when parents are inserted.</pre></li>
                
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>                force_insert = self._validate_force_insert(force_insert)</pre></li>
                
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>                parent_inserted = self._save_parents(</pre></li>
                
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>                    cls, using, update_fields, force_insert</pre></li>
                
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>                )</pre></li>
                
                </ol>
              
              <ol start="909" class="context-line">
                <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>            updated = self._save_table(
                           </pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='910' class="post-context" id="post4111347880">
                  
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>                raw,</pre></li>
                  
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>                cls,</pre></li>
                  
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>                force_insert or parent_inserted,</pre></li>
                  
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>                force_update,</pre></li>
                  
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>                using,</pre></li>
                  
                  <li onclick="toggle('pre4111347880', 'post4111347880')"><pre>                update_fields,</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111347880">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#x27;MediRemind_WebApp.models.Device&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>context_manager</td>
                    <td class="code"><pre>&lt;contextlib._GeneratorContextManager object at 0xf50e3bd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>(&lt;class &#x27;MediRemind_WebApp.models.Device&#x27;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Device&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>origin</td>
                    <td class="code"><pre>&lt;class &#x27;MediRemind_WebApp.models.Device&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>parent_inserted</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Device: PIR_SENSOR Device 87d00aa4-f0e5-4b27-ad44-d39d3381b019 at None&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#x27;default&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/base.py</code>, line 1067, in _save_table
          

          
            <div class="context" id="c4111349992">
              
                <ol start="1060" class="pre-context" id="pre4111349992">
                
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>                )</pre></li>
                
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>            fields = [</pre></li>
                
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>                f</pre></li>
                
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>                for f in meta.local_concrete_fields</pre></li>
                
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>                if not f.generated and (pk_set or f is not meta.auto_field)</pre></li>
                
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>            ]</pre></li>
                
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>            returning_fields = meta.db_returning_fields</pre></li>
                
                </ol>
              
              <ol start="1067" class="context-line">
                <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>            results = self._do_insert(
                            </pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='1068' class="post-context" id="post4111349992">
                  
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>                cls._base_manager, using, fields, returning_fields, raw</pre></li>
                  
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>            )</pre></li>
                  
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>            if results:</pre></li>
                  
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>                for value, field in zip(results[0], returning_fields):</pre></li>
                  
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>                    setattr(self, field.attname, value)</pre></li>
                  
                  <li onclick="toggle('pre4111349992', 'post4111349992')"><pre>        return updated</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111349992">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#x27;MediRemind_WebApp.models.Device&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.related.ForeignKey: user&gt;,
 &lt;django.db.models.fields.UUIDField: device_id&gt;,
 &lt;django.db.models.fields.CharField: zigbee_id&gt;,
 &lt;django.db.models.fields.CharField: name&gt;,
 &lt;django.db.models.fields.CharField: type&gt;,
 &lt;django.db.models.fields.CharField: status&gt;,
 &lt;django.db.models.fields.related.ForeignKey: room&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>(&lt;class &#x27;MediRemind_WebApp.models.Device&#x27;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Device&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>non_pks</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.related.ForeignKey: user&gt;,
 &lt;django.db.models.fields.CharField: zigbee_id&gt;,
 &lt;django.db.models.fields.CharField: name&gt;,
 &lt;django.db.models.fields.CharField: type&gt;,
 &lt;django.db.models.fields.CharField: status&gt;,
 &lt;django.db.models.fields.related.ForeignKey: room&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_set</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_val</td>
                    <td class="code"><pre>UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>returning_fields</td>
                    <td class="code"><pre>[]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Device: PIR_SENSOR Device 87d00aa4-f0e5-4b27-ad44-d39d3381b019 at None&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>updated</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#x27;default&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/base.py</code>, line 1108, in _do_insert
          

          
            <div class="context" id="c4111349832">
              
                <ol start="1101" class="pre-context" id="pre4111349832">
                
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>        return filtered._update(values) &gt; 0</pre></li>
                
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>    def _do_insert(self, manager, using, fields, returning_fields, raw):</pre></li>
                
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>        Do an INSERT. If returning_fields is defined then this method should</pre></li>
                
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>        return the newly created data for the model.</pre></li>
                
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>        &quot;&quot;&quot;</pre></li>
                
                </ol>
              
              <ol start="1108" class="context-line">
                <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>        return manager._insert(
                     </pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='1109' class="post-context" id="post4111349832">
                  
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>            [self],</pre></li>
                  
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>            fields=fields,</pre></li>
                  
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>            returning_fields=returning_fields,</pre></li>
                  
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>            using=using,</pre></li>
                  
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>            raw=raw,</pre></li>
                  
                  <li onclick="toggle('pre4111349832', 'post4111349832')"><pre>        )</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111349832">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.related.ForeignKey: user&gt;,
 &lt;django.db.models.fields.UUIDField: device_id&gt;,
 &lt;django.db.models.fields.CharField: zigbee_id&gt;,
 &lt;django.db.models.fields.CharField: name&gt;,
 &lt;django.db.models.fields.CharField: type&gt;,
 &lt;django.db.models.fields.CharField: status&gt;,
 &lt;django.db.models.fields.related.ForeignKey: room&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>manager</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0xf50818f0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>returning_fields</td>
                    <td class="code"><pre>[]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Device: PIR_SENSOR Device 87d00aa4-f0e5-4b27-ad44-d39d3381b019 at None&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#x27;default&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/manager.py</code>, line 87, in manager_method
          

          
            <div class="context" id="c4111351752">
              
                <ol start="80" class="pre-context" id="pre4111351752">
                
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre>            @wraps(method)</pre></li>
                
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="87" class="context-line">
                <li onclick="toggle('pre4111351752', 'post4111351752')"><pre>                return getattr(self.get_queryset(), name)(*args, **kwargs)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='88' class="post-context" id="post4111351752">
                  
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre>        for name, method in inspect.getmembers(</pre></li>
                  
                  <li onclick="toggle('pre4111351752', 'post4111351752')"><pre>            queryset_class, predicate=inspect.isfunction</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111351752">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>([&lt;Device: PIR_SENSOR Device 87d00aa4-f0e5-4b27-ad44-d39d3381b019 at None&gt;],)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;fields&#x27;: [&lt;django.db.models.fields.related.ForeignKey: user&gt;,
            &lt;django.db.models.fields.UUIDField: device_id&gt;,
            &lt;django.db.models.fields.CharField: zigbee_id&gt;,
            &lt;django.db.models.fields.CharField: name&gt;,
            &lt;django.db.models.fields.CharField: type&gt;,
            &lt;django.db.models.fields.CharField: status&gt;,
            &lt;django.db.models.fields.related.ForeignKey: room&gt;],
 &#x27;raw&#x27;: False,
 &#x27;returning_fields&#x27;: [],
 &#x27;using&#x27;: &#x27;default&#x27;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#x27;_insert&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0xf50818f0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/query.py</code>, line 1847, in _insert
          

          
            <div class="context" id="c4111349480">
              
                <ol start="1840" class="pre-context" id="pre4111349480">
                
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>        query = sql.InsertQuery(</pre></li>
                
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>            self.model,</pre></li>
                
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>            on_conflict=on_conflict,</pre></li>
                
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>            update_fields=update_fields,</pre></li>
                
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>            unique_fields=unique_fields,</pre></li>
                
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>        )</pre></li>
                
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>        query.insert_values(fields, objs, raw=raw)</pre></li>
                
                </ol>
              
              <ol start="1847" class="context-line">
                <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>        return query.get_compiler(using=using).execute_sql(returning_fields)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='1848' class="post-context" id="post4111349480">
                  
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>    _insert.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>    _insert.queryset_only = False</pre></li>
                  
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>    def _batched_insert(</pre></li>
                  
                  <li onclick="toggle('pre4111349480', 'post4111349480')"><pre>        self,</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111349480">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.related.ForeignKey: user&gt;,
 &lt;django.db.models.fields.UUIDField: device_id&gt;,
 &lt;django.db.models.fields.CharField: zigbee_id&gt;,
 &lt;django.db.models.fields.CharField: name&gt;,
 &lt;django.db.models.fields.CharField: type&gt;,
 &lt;django.db.models.fields.CharField: status&gt;,
 &lt;django.db.models.fields.related.ForeignKey: room&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>objs</td>
                    <td class="code"><pre>[&lt;Device: PIR_SENSOR Device 87d00aa4-f0e5-4b27-ad44-d39d3381b019 at None&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>on_conflict</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&lt;django.db.models.sql.subqueries.InsertQuery object at 0xf50e3d70&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>returning_fields</td>
                    <td class="code"><pre>[]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet []&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>unique_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#x27;default&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/sql/compiler.py</code>, line 1823, in execute_sql
          

          
            <div class="context" id="c4111348264">
              
                <ol start="1816" class="pre-context" id="pre4111348264">
                
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>            and not self.connection.features.can_return_rows_from_bulk_insert</pre></li>
                
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>        )</pre></li>
                
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>        opts = self.query.get_meta()</pre></li>
                
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>        self.returning_fields = returning_fields</pre></li>
                
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>        cols = []</pre></li>
                
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>        with self.connection.cursor() as cursor:</pre></li>
                
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>            for sql, params in self.as_sql():</pre></li>
                
                </ol>
              
              <ol start="1823" class="context-line">
                <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>                cursor.execute(sql, params)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='1824' class="post-context" id="post4111348264">
                  
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>            if not self.returning_fields:</pre></li>
                  
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>                return []</pre></li>
                  
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>            if (</pre></li>
                  
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>                self.connection.features.can_return_rows_from_bulk_insert</pre></li>
                  
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>                and len(self.query.objs) &gt; 1</pre></li>
                  
                  <li onclick="toggle('pre4111348264', 'post4111348264')"><pre>            ):</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111348264">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cols</td>
                    <td class="code"><pre>[]</pre></td>
                  </tr>
                
                  <tr>
                    <td>cursor</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>opts</td>
                    <td class="code"><pre>&lt;Options for Device&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>(2,
 UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;),
 &#x27;0x00158d000548bafd&#x27;,
 &#x27;No Tape&#x27;,
 &#x27;PIR_SENSOR&#x27;,
 &#x27;Default status&#x27;,
 None)</pre></td>
                  </tr>
                
                  <tr>
                    <td>returning_fields</td>
                    <td class="code"><pre>[]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;SQLInsertCompiler model=Device connection=&lt;DatabaseWrapper vendor=&#x27;mysql&#x27; alias=&#x27;default&#x27;&gt; using=&#x27;default&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>(&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`, &#x27;
 &#x27;`name`, `type`, `status`, `room_id`) VALUES (%s, %s, %s, %s, %s, %s, %s)&#x27;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py</code>, line 122, in execute
          

          
            <div class="context" id="c4111349256">
              
                <ol start="115" class="pre-context" id="pre4111349256">
                
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre>class CursorDebugWrapper(CursorWrapper):</pre></li>
                
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre>    # XXX callproc isn&#x27;t instrumented at this time.</pre></li>
                
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre>        with self.debug_sql(sql, params, use_last_executed_query=True):</pre></li>
                
                </ol>
              
              <ol start="122" class="context-line">
                <li onclick="toggle('pre4111349256', 'post4111349256')"><pre>            return super().execute(sql, params)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='123' class="post-context" id="post4111349256">
                  
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre>    def executemany(self, sql, param_list):</pre></li>
                  
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre>        with self.debug_sql(sql, param_list, many=True):</pre></li>
                  
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre>            return super().executemany(sql, param_list)</pre></li>
                  
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111349256', 'post4111349256')"><pre>    @contextmanager</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111349256">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>__class__</td>
                    <td class="code"><pre>&lt;class &#x27;django.db.backends.utils.CursorDebugWrapper&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>(2,
 UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;),
 &#x27;0x00158d000548bafd&#x27;,
 &#x27;No Tape&#x27;,
 &#x27;PIR_SENSOR&#x27;,
 &#x27;Default status&#x27;,
 None)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>(&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`, &#x27;
 &#x27;`name`, `type`, `status`, `room_id`) VALUES (%s, %s, %s, %s, %s, %s, %s)&#x27;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py</code>, line 79, in execute
          

          
            <div class="context" id="c4111349928">
              
                <ol start="72" class="pre-context" id="pre4111349928">
                
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>            elif kparams is None:</pre></li>
                
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>                return self.cursor.callproc(procname, params)</pre></li>
                
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>                params = params or ()</pre></li>
                
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>                return self.cursor.callproc(procname, params, kparams)</pre></li>
                
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                </ol>
              
              <ol start="79" class="context-line">
                <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>        return self._execute_with_wrappers(
                   </pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='80' class="post-context" id="post4111349928">
                  
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>            sql, params, many=False, executor=self._execute</pre></li>
                  
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>        )</pre></li>
                  
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>    def executemany(self, sql, param_list):</pre></li>
                  
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>        return self._execute_with_wrappers(</pre></li>
                  
                  <li onclick="toggle('pre4111349928', 'post4111349928')"><pre>            sql, param_list, many=True, executor=self._executemany</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111349928">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>(2,
 UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;),
 &#x27;0x00158d000548bafd&#x27;,
 &#x27;No Tape&#x27;,
 &#x27;PIR_SENSOR&#x27;,
 &#x27;Default status&#x27;,
 None)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>(&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`, &#x27;
 &#x27;`name`, `type`, `status`, `room_id`) VALUES (%s, %s, %s, %s, %s, %s, %s)&#x27;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py</code>, line 92, in _execute_with_wrappers
          

          
            <div class="context" id="c4111347912">
              
                <ol start="85" class="pre-context" id="pre4111347912">
                
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>            sql, param_list, many=True, executor=self._executemany</pre></li>
                
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>        )</pre></li>
                
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>    def _execute_with_wrappers(self, sql, params, many, executor):</pre></li>
                
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>        context = {&quot;connection&quot;: self.db, &quot;cursor&quot;: self}</pre></li>
                
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>        for wrapper in reversed(self.db.execute_wrappers):</pre></li>
                
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>            executor = functools.partial(wrapper, executor)</pre></li>
                
                </ol>
              
              <ol start="92" class="context-line">
                <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>        return executor(sql, params, many, context)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='93' class="post-context" id="post4111347912">
                  
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>    def _execute(self, sql, params, *ignored_wrapper_args):</pre></li>
                  
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>        # Raise a warning during app initialization (stored_app_configs is only</pre></li>
                  
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>        # ever set during testing).</pre></li>
                  
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>        if not apps.ready and not apps.stored_app_configs:</pre></li>
                  
                  <li onclick="toggle('pre4111347912', 'post4111347912')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111347912">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>context</td>
                    <td class="code"><pre>{&#x27;connection&#x27;: &lt;DatabaseWrapper vendor=&#x27;mysql&#x27; alias=&#x27;default&#x27;&gt;,
 &#x27;cursor&#x27;: &lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>executor</td>
                    <td class="code"><pre>&lt;bound method CursorWrapper._execute of &lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>many</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>(2,
 UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;),
 &#x27;0x00158d000548bafd&#x27;,
 &#x27;No Tape&#x27;,
 &#x27;PIR_SENSOR&#x27;,
 &#x27;Default status&#x27;,
 None)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>(&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`, &#x27;
 &#x27;`name`, `type`, `status`, `room_id`) VALUES (%s, %s, %s, %s, %s, %s, %s)&#x27;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py</code>, line 100, in _execute
          

          
            <div class="context" id="c4111348296">
              
                <ol start="93" class="pre-context" id="pre4111348296">
                
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>    def _execute(self, sql, params, *ignored_wrapper_args):</pre></li>
                
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>        # Raise a warning during app initialization (stored_app_configs is only</pre></li>
                
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>        # ever set during testing).</pre></li>
                
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>        if not apps.ready and not apps.stored_app_configs:</pre></li>
                
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>
                
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                
                </ol>
              
              <ol start="100" class="context-line">
                <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>        with self.db.wrap_database_errors:
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='101' class="post-context" id="post4111348296">
                  
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>            if params is None:</pre></li>
                  
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>                # params default might be backend specific.</pre></li>
                  
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>                return self.cursor.execute(sql)</pre></li>
                  
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>            else:</pre></li>
                  
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre>                return self.cursor.execute(sql, params)</pre></li>
                  
                  <li onclick="toggle('pre4111348296', 'post4111348296')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111348296">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>ignored_wrapper_args</td>
                    <td class="code"><pre>(False,
 {&#x27;connection&#x27;: &lt;DatabaseWrapper vendor=&#x27;mysql&#x27; alias=&#x27;default&#x27;&gt;,
  &#x27;cursor&#x27;: &lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;})</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>(2,
 UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;),
 &#x27;0x00158d000548bafd&#x27;,
 &#x27;No Tape&#x27;,
 &#x27;PIR_SENSOR&#x27;,
 &#x27;Default status&#x27;,
 None)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>(&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`, &#x27;
 &#x27;`name`, `type`, `status`, `room_id`) VALUES (%s, %s, %s, %s, %s, %s, %s)&#x27;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/utils.py</code>, line 91, in __exit__
          

          
            <div class="context" id="c4111348904">
              
                <ol start="84" class="pre-context" id="pre4111348904">
                
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>            db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)</pre></li>
                
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>            if issubclass(exc_type, db_exc_type):</pre></li>
                
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>                dj_exc_value = dj_exc_type(*exc_value.args)</pre></li>
                
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>                # Only set the &#x27;errors_occurred&#x27; flag for errors that may make</pre></li>
                
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>                # the connection unusable.</pre></li>
                
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>                if dj_exc_type not in (DataError, IntegrityError):</pre></li>
                
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>                    self.wrapper.errors_occurred = True</pre></li>
                
                </ol>
              
              <ol start="91" class="context-line">
                <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>                raise dj_exc_value.with_traceback(traceback) from exc_value
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='92' class="post-context" id="post4111348904">
                  
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>    def __call__(self, func):</pre></li>
                  
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>        # Note that we are intentionally not using @wraps here for performance</pre></li>
                  
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>        # reasons. Refs #21109.</pre></li>
                  
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>        def inner(*args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre4111348904', 'post4111348904')"><pre>            with self:</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111348904">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>db_exc_type</td>
                    <td class="code"><pre>&lt;class &#x27;MySQLdb.DataError&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>dj_exc_type</td>
                    <td class="code"><pre>&lt;class &#x27;django.db.utils.DataError&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>dj_exc_value</td>
                    <td class="code"><pre>DataError(1406, &quot;Data too long for column &#x27;type&#x27; at row 1&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc_type</td>
                    <td class="code"><pre>&lt;class &#x27;MySQLdb.DataError&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc_value</td>
                    <td class="code"><pre>DataError(1406, &quot;Data too long for column &#x27;type&#x27; at row 1&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.utils.DatabaseErrorWrapper object at 0xf50dc810&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>traceback</td>
                    <td class="code"><pre>&lt;traceback object at 0xf50e33a8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py</code>, line 105, in _execute
          

          
            <div class="context" id="c4111348648">
              
                <ol start="98" class="pre-context" id="pre4111348648">
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>        with self.db.wrap_database_errors:</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>            if params is None:</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>                # params default might be backend specific.</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>                return self.cursor.execute(sql)</pre></li>
                
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>            else:</pre></li>
                
                </ol>
              
              <ol start="105" class="context-line">
                <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>                return self.cursor.execute(sql, params)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='106' class="post-context" id="post4111348648">
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>    def _executemany(self, sql, param_list, *ignored_wrapper_args):</pre></li>
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>        # Raise a warning during app initialization (stored_app_configs is only</pre></li>
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>        # ever set during testing).</pre></li>
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>        if not apps.ready and not apps.stored_app_configs:</pre></li>
                  
                  <li onclick="toggle('pre4111348648', 'post4111348648')"><pre>            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111348648">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>ignored_wrapper_args</td>
                    <td class="code"><pre>(False,
 {&#x27;connection&#x27;: &lt;DatabaseWrapper vendor=&#x27;mysql&#x27; alias=&#x27;default&#x27;&gt;,
  &#x27;cursor&#x27;: &lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;})</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>(2,
 UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;),
 &#x27;0x00158d000548bafd&#x27;,
 &#x27;No Tape&#x27;,
 &#x27;PIR_SENSOR&#x27;,
 &#x27;Default status&#x27;,
 None)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0xf50e37d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>(&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`, &#x27;
 &#x27;`name`, `type`, `status`, `room_id`) VALUES (%s, %s, %s, %s, %s, %s, %s)&#x27;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/mysql/base.py</code>, line 76, in execute
          

          
            <div class="context" id="c4111348584">
              
                <ol start="69" class="pre-context" id="pre4111348584">
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>    def __init__(self, cursor):</pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>        self.cursor = cursor</pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>    def execute(self, query, args=None):</pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            # args is None means no string interpolation</pre></li>
                
                </ol>
              
              <ol start="76" class="context-line">
                <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            return self.cursor.execute(query, args)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='77' class="post-context" id="post4111348584">
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>        except Database.OperationalError as e:</pre></li>
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>                raise IntegrityError(*tuple(e.args))</pre></li>
                  
                  <li onclick="toggle('pre4111348584', 'post4111348584')"><pre>            raise</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111348584">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(2,
 UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;),
 &#x27;0x00158d000548bafd&#x27;,
 &#x27;No Tape&#x27;,
 &#x27;PIR_SENSOR&#x27;,
 &#x27;Default status&#x27;,
 None)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>(&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`, &#x27;
 &#x27;`name`, `type`, `status`, `room_id`) VALUES (%s, %s, %s, %s, %s, %s, %s)&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0xf50e3d90&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/cursors.py</code>, line 179, in execute
          

          
            <div class="context" id="c4111351720">
              
                <ol start="172" class="pre-context" id="pre4111351720">
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        Returns integer represents rows affected, if any</pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        self._discard()</pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        mogrified_query = self._mogrify(query, args)</pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        assert isinstance(mogrified_query, (bytes, bytearray))</pre></li>
                
                </ol>
              
              <ol start="179" class="context-line">
                <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        res = self._query(mogrified_query)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='180' class="post-context" id="post4111351720">
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        return res</pre></li>
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>    def _mogrify(self, query, args=None):</pre></li>
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        &quot;&quot;&quot;Return query after binding args.&quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre>        db = self._get_db()</pre></li>
                  
                  <li onclick="toggle('pre4111351720', 'post4111351720')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111351720">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(2,
 UUID(&#x27;87d00aa4-f0e5-4b27-ad44-d39d3381b019&#x27;),
 &#x27;0x00158d000548bafd&#x27;,
 &#x27;No Tape&#x27;,
 &#x27;PIR_SENSOR&#x27;,
 &#x27;Default status&#x27;,
 None)</pre></td>
                  </tr>
                
                  <tr>
                    <td>mogrified_query</td>
                    <td class="code"><pre>(b&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`,&#x27;
 b&quot; `name`, `type`, `status`, `room_id`) VALUES (2, &#x27;87d00aa4-f0e5-4b27-ad44-d3&quot;
 b&quot;9d3381b019&#x27;, &#x27;0x00158d000548bafd&#x27;, &#x27;No Tape&#x27;, &#x27;PIR_SENSOR&#x27;, &#x27;Default status&#x27;&quot;
 b&#x27;, NULL)&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>(&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`, &#x27;
 &#x27;`name`, `type`, `status`, `room_id`) VALUES (%s, %s, %s, %s, %s, %s, %s)&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MySQLdb.cursors.Cursor object at 0xf50e3ef0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/cursors.py</code>, line 330, in _query
          

          
            <div class="context" id="c4111349576">
              
                <ol start="323" class="pre-context" id="pre4111349576">
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        return args</pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>    def _query(self, q):</pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        db = self._get_db()</pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self._result = None</pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self.rowcount = None</pre></li>
                
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self.lastrowid = None</pre></li>
                
                </ol>
              
              <ol start="330" class="context-line">
                <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        db.query(q)
             ^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='331' class="post-context" id="post4111349576">
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self._do_get_result(db)</pre></li>
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self._post_get_result()</pre></li>
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        self._executed = q</pre></li>
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>        return self.rowcount</pre></li>
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111349576', 'post4111349576')"><pre>    def _fetch_row(self, size=1):</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111349576">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>db</td>
                    <td class="code"><pre>&lt;_mysql.connection open to &#x27;localhost&#x27; at 0xf470d6a8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>q</td>
                    <td class="code"><pre>(b&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`,&#x27;
 b&quot; `name`, `type`, `status`, `room_id`) VALUES (2, &#x27;87d00aa4-f0e5-4b27-ad44-d3&quot;
 b&quot;9d3381b019&#x27;, &#x27;0x00158d000548bafd&#x27;, &#x27;No Tape&#x27;, &#x27;PIR_SENSOR&#x27;, &#x27;Default status&#x27;&quot;
 b&#x27;, NULL)&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MySQLdb.cursors.Cursor object at 0xf50e3ef0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/connections.py</code>, line 261, in query
          

          
            <div class="context" id="c4111350280">
              
                <ol start="254" class="pre-context" id="pre4111350280">
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        return (cursorclass or self.cursorclass)(self)</pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre></pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>    def query(self, query):</pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        # Since _mysql releases GIL while querying, we need immutable buffer.</pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        if isinstance(query, bytearray):</pre></li>
                
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>            query = bytes(query)</pre></li>
                
                </ol>
              
              <ol start="261" class="context-line">
                <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        _mysql.connection.query(self, query)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='262' class="post-context" id="post4111350280">
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre></pre></li>
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>    def _bytes_literal(self, bs):</pre></li>
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        assert isinstance(bs, (bytes, bytearray))</pre></li>
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        x = self.string_literal(bs)  # x is escaped and quoted bytes</pre></li>
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>        if self._binary_prefix:</pre></li>
                  
                  <li onclick="toggle('pre4111350280', 'post4111350280')"><pre>            return b&quot;_binary&quot; + x</pre></li>
                  
              </ol>
              
            </div>
          

          
            
              <details>
                <summary class="commands">Local vars</summary>
            
            <table class="vars" id="v4111350280">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>(b&#x27;INSERT INTO `MediRemind_WebApp_device` (`user_id`, `device_id`, `zigbee_id`,&#x27;
 b&quot; `name`, `type`, `status`, `room_id`) VALUES (2, &#x27;87d00aa4-f0e5-4b27-ad44-d3&quot;
 b&quot;9d3381b019&#x27;, &#x27;0x00158d000548bafd&#x27;, &#x27;No Tape&#x27;, &#x27;PIR_SENSOR&#x27;, &#x27;Default status&#x27;&quot;
 b&#x27;, NULL)&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;_mysql.connection open to &#x27;localhost&#x27; at 0xf470d6a8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
            </details>
          
        </li>
      
    </ul>
  </div>

  <form action="https://dpaste.com/" name="pasteform" id="pasteform" method="post">
  <div id="pastebinTraceback" class="pastebin">
    <input type="hidden" name="language" value="PythonConsole">
    <input type="hidden" name="title"
      value="DataError at /api/device/">
    <input type="hidden" name="source" value="Django Dpaste Agent">
    <input type="hidden" name="poster" value="Django">
    <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:


Request Method: POST
Request URL: http://localhost:8000/api/device/

Django Version: 5.0.4
Python Version: 3.11.2
Installed Applications:
[&#x27;django.contrib.admin&#x27;,
 &#x27;django.contrib.auth&#x27;,
 &#x27;django.contrib.contenttypes&#x27;,
 &#x27;django.contrib.sessions&#x27;,
 &#x27;django.contrib.messages&#x27;,
 &#x27;django.contrib.staticfiles&#x27;,
 &#x27;MediRemind_WebApp&#x27;,
 &#x27;rest_framework&#x27;,
 &#x27;rest_framework.authtoken&#x27;,
 &#x27;django_extensions&#x27;]
Installed Middleware:
[&#x27;django.middleware.security.SecurityMiddleware&#x27;,
 &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,
 &#x27;django.middleware.common.CommonMiddleware&#x27;,
 &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,
 &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,
 &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,
 &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;]



Traceback (most recent call last):
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/mysql/base.py", line 76, in execute
    return self.cursor.execute(query, args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/cursors.py", line 330, in _query
    db.query(q)
    ^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/connections.py", line 261, in query
    _mysql.connection.query(self, query)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The above exception ((1406, &quot;Data too long for column &#x27;type&#x27; at row 1&quot;)) was the direct cause of the following exception:
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
               ^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/views/generic/base.py", line 104, in view
    return self.dispatch(request, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
    ^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/Medication-Reminder-CEP2/Django Webserver/MediRemind_WebApp/views.py", line 224, in post
    serializer.save(user=request.user)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/serializers.py", line 208, in save
    self.instance = self.create(validated_data)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/rest_framework/serializers.py", line 989, in create
    instance = ModelClass._default_manager.create(**validated_data)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/base.py", line 822, in save
    self.save_base(
    ^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/base.py", line 909, in save_base
    updated = self._save_table(
              
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/base.py", line 1067, in _save_table
    results = self._do_insert(
              
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/base.py", line 1108, in _do_insert
    return manager._insert(
           
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/models/sql/compiler.py", line 1823, in execute_sql
    cursor.execute(sql, params)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
           
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/django/db/backends/mysql/base.py", line 76, in execute
    return self.cursor.execute(query, args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/cursors.py", line 330, in _query
    db.query(q)
    ^^^^^^^^^^^
  File "/home/peder/myvenv/lib/python3.11/site-packages/MySQLdb/connections.py", line 261, in query
    _mysql.connection.query(self, query)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Exception Type: DataError at /api/device/
Exception Value: (1406, &quot;Data too long for column &#x27;type&#x27; at row 1&quot;)
</textarea>
  <br><br>
  <input type="submit" value="Share this traceback on a public website">
  </div>
</form>

</div>


<div id="requestinfo">
  <h2>Request information</h2>


  
    <h3 id="user-info">USER</h3>
    <p>TESTUSER1</p>
  

  <h3 id="get-info">GET</h3>
  
    <p>No GET data</p>
  

  <h3 id="post-info">POST</h3>
  
    <p>No POST data</p>
  

  <h3 id="files-info">FILES</h3>
  
    <p>No FILES data</p>
  

  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data</p>
  

  <h3 id="meta-info">META</h3>
  <table class="req">
    <thead>
      <tr>
        <th>Variable</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>BROWSER</td>
          <td class="code"><pre>&#x27;/home/peder/.vscode-server/cli/servers/Stable-5c3e652f63e798a5ac2f31ffd0d863669328dc4c/server/bin/helpers/browser.sh&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>COLORTERM</td>
          <td class="code"><pre>&#x27;truecolor&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CONTENT_LENGTH</td>
          <td class="code"><pre>&#x27;151&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CONTENT_TYPE</td>
          <td class="code"><pre>&#x27;application/json&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DBUS_SESSION_BUS_ADDRESS</td>
          <td class="code"><pre>&#x27;unix:path=/run/user/1000/bus&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DJANGO_SETTINGS_MODULE</td>
          <td class="code"><pre>&#x27;Server_Configuration.settings&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>GATEWAY_INTERFACE</td>
          <td class="code"><pre>&#x27;CGI/1.1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>GIT_ASKPASS</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HOME</td>
          <td class="code"><pre>&#x27;/home/peder&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT</td>
          <td class="code"><pre>&#x27;*/*&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT_ENCODING</td>
          <td class="code"><pre>&#x27;gzip, deflate&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_AUTHORIZATION</td>
          <td class="code"><pre>&#x27;Token 43ac84fbf3d368611f60dd24d878fe9f6b5ce635&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CONNECTION</td>
          <td class="code"><pre>&#x27;keep-alive&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_HOST</td>
          <td class="code"><pre>&#x27;localhost:8000&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_USER_AGENT</td>
          <td class="code"><pre>&#x27;python-requests/2.28.1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LANG</td>
          <td class="code"><pre>&#x27;en_GB.UTF-8&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LOGNAME</td>
          <td class="code"><pre>&#x27;peder&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LS_COLORS</td>
          <td class="code"><pre>&#x27;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.swp=00;90:*.tmp=00;90:*.dpkg-dist=00;90:*.dpkg-old=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>MOTD_SHOWN</td>
          <td class="code"><pre>&#x27;pam&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>NO_AT_BRIDGE</td>
          <td class="code"><pre>&#x27;1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>OLDPWD</td>
          <td class="code"><pre>&#x27;/home/peder/Medication-Reminder-CEP2&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PATH</td>
          <td class="code"><pre>&#x27;/home/peder/myvenv/bin:/home/peder/.vscode-server/cli/servers/Stable-5c3e652f63e798a5ac2f31ffd0d863669328dc4c/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_INFO</td>
          <td class="code"><pre>&#x27;/api/device/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PS1</td>
          <td class="code"><pre>(&#x27;\\[\x1b]633;A\x07\\](myvenv) \\[\x1b]633;A\x07\\]\\[\\e]0;\\u@\\h: &#x27;
 &#x27;\\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w &#x27;
 &#x27;\\$\\[\\033[00m\\] \\[\x1b]633;B\x07\\]\\[\x1b]633;B\x07\\]&#x27;)</pre></td>
        </tr>
      
        <tr>
          <td>PWD</td>
          <td class="code"><pre>&#x27;/home/peder/Medication-Reminder-CEP2/Django Webserver&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>QUERY_STRING</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_ADDR</td>
          <td class="code"><pre>&#x27;127.0.0.1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_HOST</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_METHOD</td>
          <td class="code"><pre>&#x27;POST&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>RUN_MAIN</td>
          <td class="code"><pre>&#x27;true&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_NAME</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_NAME</td>
          <td class="code"><pre>&#x27;pi&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PORT</td>
          <td class="code"><pre>&#x27;8000&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PROTOCOL</td>
          <td class="code"><pre>&#x27;HTTP/1.1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SOFTWARE</td>
          <td class="code"><pre>&#x27;WSGIServer/0.2&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SHELL</td>
          <td class="code"><pre>&#x27;/bin/bash&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SHLVL</td>
          <td class="code"><pre>&#x27;1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SSH_CLIENT</td>
          <td class="code"><pre>&#x27;192.168.0.247 49962 22&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SSH_CONNECTION</td>
          <td class="code"><pre>&#x27;192.168.0.247 49962 192.168.0.248 22&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SSL_CERT_DIR</td>
          <td class="code"><pre>&#x27;/usr/lib/ssl/certs&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SSL_CERT_FILE</td>
          <td class="code"><pre>&#x27;/usr/lib/ssl/cert.pem&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TERM</td>
          <td class="code"><pre>&#x27;xterm-256color&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TERM_PROGRAM</td>
          <td class="code"><pre>&#x27;vscode&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TERM_PROGRAM_VERSION</td>
          <td class="code"><pre>&#x27;1.88.0&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TEXTDOMAIN</td>
          <td class="code"><pre>&#x27;Linux-PAM&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TZ</td>
          <td class="code"><pre>&#x27;UTC&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>USER</td>
          <td class="code"><pre>&#x27;peder&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>VIRTUAL_ENV</td>
          <td class="code"><pre>&#x27;/home/peder/myvenv&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>VIRTUAL_ENV_PROMPT</td>
          <td class="code"><pre>&#x27;(myvenv) &#x27;</pre></td>
        </tr>
      
        <tr>
          <td>VSCODE_GIT_ASKPASS_EXTRA_ARGS</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>VSCODE_GIT_ASKPASS_MAIN</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>VSCODE_GIT_ASKPASS_NODE</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>VSCODE_GIT_IPC_HANDLE</td>
          <td class="code"><pre>&#x27;/run/user/1000/vscode-git-9eceef0217.sock&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>VSCODE_IPC_HOOK_CLI</td>
          <td class="code"><pre>&#x27;/run/user/1000/vscode-ipc-6cd2ff92-d32f-41ef-8347-52640f0a830f.sock&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>XDG_RUNTIME_DIR</td>
          <td class="code"><pre>&#x27;/run/user/1000&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>XDG_SESSION_CLASS</td>
          <td class="code"><pre>&#x27;user&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>XDG_SESSION_ID</td>
          <td class="code"><pre>&#x27;7&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>XDG_SESSION_TYPE</td>
          <td class="code"><pre>&#x27;tty&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>_</td>
          <td class="code"><pre>&#x27;/home/peder/myvenv/bin/python&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.errors</td>
          <td class="code"><pre>&lt;_io.TextIOWrapper name=&#x27;&lt;stderr&gt;&#x27; mode=&#x27;w&#x27; encoding=&#x27;utf-8&#x27;&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.file_wrapper</td>
          <td class="code"><pre>&lt;class &#x27;wsgiref.util.FileWrapper&#x27;&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.input</td>
          <td class="code"><pre>&lt;django.core.handlers.wsgi.LimitedStream object at 0xf5132da8&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multiprocess</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multithread</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.run_once</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.url_scheme</td>
          <td class="code"><pre>&#x27;http&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.version</td>
          <td class="code"><pre>(1, 0)</pre></td>
        </tr>
      
    </tbody>
  </table>


  <h3 id="settings-info">Settings</h3>
  <h4>Using settings module <code>Server_Configuration.settings</code></h4>
  <table class="req">
    <thead>
      <tr>
        <th>Setting</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>ABSOLUTE_URL_OVERRIDES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>ADMINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>ALLOWED_HOSTS</td>
          <td class="code"><pre>[&#x27;192.168.60.160&#x27;, &#x27;localhost&#x27;, &#x27;127.0.0.1&#x27;, &#x27;192.168.0.211&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>APPEND_SLASH</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>AUTHENTICATION_BACKENDS</td>
          <td class="code"><pre>[&#x27;django.contrib.auth.backends.ModelBackend&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_PASSWORD_VALIDATORS</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_USER_MODEL</td>
          <td class="code"><pre>&#x27;auth.User&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>BASE_DIR</td>
          <td class="code"><pre>PosixPath(&#x27;/home/peder/Medication-Reminder-CEP2/Django Webserver&#x27;)</pre></td>
        </tr>
      
        <tr>
          <td>CACHES</td>
          <td class="code"><pre>{&#x27;default&#x27;: {&#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.locmem.LocMemCache&#x27;}}</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_ALIAS</td>
          <td class="code"><pre>&#x27;default&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_KEY_PREFIX</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_SECONDS</td>
          <td class="code"><pre>600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_AGE</td>
          <td class="code"><pre>31449600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_NAME</td>
          <td class="code"><pre>&#x27;csrftoken&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_PATH</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SAMESITE</td>
          <td class="code"><pre>&#x27;Lax&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_FAILURE_VIEW</td>
          <td class="code"><pre>&#x27;django.views.csrf.csrf_failure&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_HEADER_NAME</td>
          <td class="code"><pre>&#x27;HTTP_X_CSRFTOKEN&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_TRUSTED_ORIGINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_USE_SESSIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DATABASES</td>
          <td class="code"><pre>{&#x27;backup&#x27;: {&#x27;ATOMIC_REQUESTS&#x27;: False,
            &#x27;AUTOCOMMIT&#x27;: True,
            &#x27;CONN_HEALTH_CHECKS&#x27;: False,
            &#x27;CONN_MAX_AGE&#x27;: 0,
            &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,
            &#x27;HOST&#x27;: &#x27;192.168.60.160&#x27;,
            &#x27;NAME&#x27;: &#x27;django_db&#x27;,
            &#x27;OPTIONS&#x27;: {},
            &#x27;PASSWORD&#x27;: &#x27;********************&#x27;,
            &#x27;PORT&#x27;: &#x27;3306&#x27;,
            &#x27;TEST&#x27;: {&#x27;CHARSET&#x27;: None,
                     &#x27;COLLATION&#x27;: None,
                     &#x27;MIGRATE&#x27;: True,
                     &#x27;MIRROR&#x27;: None,
                     &#x27;NAME&#x27;: None},
            &#x27;TIME_ZONE&#x27;: None,
            &#x27;USER&#x27;: &#x27;django_user&#x27;},
 &#x27;default&#x27;: {&#x27;ATOMIC_REQUESTS&#x27;: False,
             &#x27;AUTOCOMMIT&#x27;: True,
             &#x27;CONN_HEALTH_CHECKS&#x27;: False,
             &#x27;CONN_MAX_AGE&#x27;: 0,
             &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,
             &#x27;HOST&#x27;: &#x27;localhost&#x27;,
             &#x27;NAME&#x27;: &#x27;django_db&#x27;,
             &#x27;OPTIONS&#x27;: {},
             &#x27;PASSWORD&#x27;: &#x27;********************&#x27;,
             &#x27;PORT&#x27;: &#x27;3306&#x27;,
             &#x27;TEST&#x27;: {&#x27;CHARSET&#x27;: None,
                      &#x27;COLLATION&#x27;: None,
                      &#x27;MIGRATE&#x27;: True,
                      &#x27;MIRROR&#x27;: None,
                      &#x27;NAME&#x27;: None},
             &#x27;TIME_ZONE&#x27;: None,
             &#x27;USER&#x27;: &#x27;django_user&#x27;}}</pre></td>
        </tr>
      
        <tr>
          <td>DATABASE_ROUTERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_NUMBER_FIELDS</td>
          <td class="code"><pre>1000</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_NUMBER_FILES</td>
          <td class="code"><pre>100</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_FORMAT</td>
          <td class="code"><pre>&#x27;N j, Y, P&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_INPUT_FORMATS</td>
          <td class="code"><pre>[&#x27;%Y-%m-%d %H:%M:%S&#x27;,
 &#x27;%Y-%m-%d %H:%M:%S.%f&#x27;,
 &#x27;%Y-%m-%d %H:%M&#x27;,
 &#x27;%m/%d/%Y %H:%M:%S&#x27;,
 &#x27;%m/%d/%Y %H:%M:%S.%f&#x27;,
 &#x27;%m/%d/%Y %H:%M&#x27;,
 &#x27;%m/%d/%y %H:%M:%S&#x27;,
 &#x27;%m/%d/%y %H:%M:%S.%f&#x27;,
 &#x27;%m/%d/%y %H:%M&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>DATE_FORMAT</td>
          <td class="code"><pre>&#x27;N j, Y&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DATE_INPUT_FORMATS</td>
          <td class="code"><pre>[&#x27;%Y-%m-%d&#x27;,
 &#x27;%m/%d/%Y&#x27;,
 &#x27;%m/%d/%y&#x27;,
 &#x27;%b %d %Y&#x27;,
 &#x27;%b %d, %Y&#x27;,
 &#x27;%d %b %Y&#x27;,
 &#x27;%d %b, %Y&#x27;,
 &#x27;%B %d %Y&#x27;,
 &#x27;%B %d, %Y&#x27;,
 &#x27;%d %B %Y&#x27;,
 &#x27;%d %B, %Y&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG_PROPAGATE_EXCEPTIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DECIMAL_SEPARATOR</td>
          <td class="code"><pre>&#x27;.&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_AUTO_FIELD</td>
          <td class="code"><pre>&#x27;django.db.models.BigAutoField&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CHARSET</td>
          <td class="code"><pre>&#x27;utf-8&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER</td>
          <td class="code"><pre>&#x27;django.views.debug.ExceptionReporter&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER_FILTER</td>
          <td class="code"><pre>&#x27;django.views.debug.SafeExceptionReporterFilter&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FILE_STORAGE</td>
          <td class="code"><pre>&#x27;django.core.files.storage.FileSystemStorage&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FROM_EMAIL</td>
          <td class="code"><pre>&#x27;webmaster@localhost&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_INDEX_TABLESPACE</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_TABLESPACE</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DISALLOWED_USER_AGENTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_BACKEND</td>
          <td class="code"><pre>&#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST</td>
          <td class="code"><pre>&#x27;localhost&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_PASSWORD</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_USER</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_PORT</td>
          <td class="code"><pre>25</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_CERTFILE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_KEYFILE</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SUBJECT_PREFIX</td>
          <td class="code"><pre>&#x27;[Django] &#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_TIMEOUT</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_LOCALTIME</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_SSL</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_TLS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_DIRECTORY_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_HANDLERS</td>
          <td class="code"><pre>[&#x27;django.core.files.uploadhandler.MemoryFileUploadHandler&#x27;,
 &#x27;django.core.files.uploadhandler.TemporaryFileUploadHandler&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_PERMISSIONS</td>
          <td class="code"><pre>420</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_TEMP_DIR</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FIRST_DAY_OF_WEEK</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>FIXTURE_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>FORCE_SCRIPT_NAME</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORMAT_MODULE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORMS_URLFIELD_ASSUME_HTTPS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>FORM_RENDERER</td>
          <td class="code"><pre>&#x27;django.forms.renderers.DjangoTemplates&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>IGNORABLE_404_URLS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>INSTALLED_APPS</td>
          <td class="code"><pre>[&#x27;django.contrib.admin&#x27;,
 &#x27;django.contrib.auth&#x27;,
 &#x27;django.contrib.contenttypes&#x27;,
 &#x27;django.contrib.sessions&#x27;,
 &#x27;django.contrib.messages&#x27;,
 &#x27;django.contrib.staticfiles&#x27;,
 &#x27;MediRemind_WebApp&#x27;,
 &#x27;rest_framework&#x27;,
 &#x27;rest_framework.authtoken&#x27;,
 &#x27;django_extensions&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>INTERNAL_IPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES</td>
          <td class="code"><pre>[(&#x27;af&#x27;, &#x27;Afrikaans&#x27;),
 (&#x27;ar&#x27;, &#x27;Arabic&#x27;),
 (&#x27;ar-dz&#x27;, &#x27;Algerian Arabic&#x27;),
 (&#x27;ast&#x27;, &#x27;Asturian&#x27;),
 (&#x27;az&#x27;, &#x27;Azerbaijani&#x27;),
 (&#x27;bg&#x27;, &#x27;Bulgarian&#x27;),
 (&#x27;be&#x27;, &#x27;Belarusian&#x27;),
 (&#x27;bn&#x27;, &#x27;Bengali&#x27;),
 (&#x27;br&#x27;, &#x27;Breton&#x27;),
 (&#x27;bs&#x27;, &#x27;Bosnian&#x27;),
 (&#x27;ca&#x27;, &#x27;Catalan&#x27;),
 (&#x27;ckb&#x27;, &#x27;Central Kurdish (Sorani)&#x27;),
 (&#x27;cs&#x27;, &#x27;Czech&#x27;),
 (&#x27;cy&#x27;, &#x27;Welsh&#x27;),
 (&#x27;da&#x27;, &#x27;Danish&#x27;),
 (&#x27;de&#x27;, &#x27;German&#x27;),
 (&#x27;dsb&#x27;, &#x27;Lower Sorbian&#x27;),
 (&#x27;el&#x27;, &#x27;Greek&#x27;),
 (&#x27;en&#x27;, &#x27;English&#x27;),
 (&#x27;en-au&#x27;, &#x27;Australian English&#x27;),
 (&#x27;en-gb&#x27;, &#x27;British English&#x27;),
 (&#x27;eo&#x27;, &#x27;Esperanto&#x27;),
 (&#x27;es&#x27;, &#x27;Spanish&#x27;),
 (&#x27;es-ar&#x27;, &#x27;Argentinian Spanish&#x27;),
 (&#x27;es-co&#x27;, &#x27;Colombian Spanish&#x27;),
 (&#x27;es-mx&#x27;, &#x27;Mexican Spanish&#x27;),
 (&#x27;es-ni&#x27;, &#x27;Nicaraguan Spanish&#x27;),
 (&#x27;es-ve&#x27;, &#x27;Venezuelan Spanish&#x27;),
 (&#x27;et&#x27;, &#x27;Estonian&#x27;),
 (&#x27;eu&#x27;, &#x27;Basque&#x27;),
 (&#x27;fa&#x27;, &#x27;Persian&#x27;),
 (&#x27;fi&#x27;, &#x27;Finnish&#x27;),
 (&#x27;fr&#x27;, &#x27;French&#x27;),
 (&#x27;fy&#x27;, &#x27;Frisian&#x27;),
 (&#x27;ga&#x27;, &#x27;Irish&#x27;),
 (&#x27;gd&#x27;, &#x27;Scottish Gaelic&#x27;),
 (&#x27;gl&#x27;, &#x27;Galician&#x27;),
 (&#x27;he&#x27;, &#x27;Hebrew&#x27;),
 (&#x27;hi&#x27;, &#x27;Hindi&#x27;),
 (&#x27;hr&#x27;, &#x27;Croatian&#x27;),
 (&#x27;hsb&#x27;, &#x27;Upper Sorbian&#x27;),
 (&#x27;hu&#x27;, &#x27;Hungarian&#x27;),
 (&#x27;hy&#x27;, &#x27;Armenian&#x27;),
 (&#x27;ia&#x27;, &#x27;Interlingua&#x27;),
 (&#x27;id&#x27;, &#x27;Indonesian&#x27;),
 (&#x27;ig&#x27;, &#x27;Igbo&#x27;),
 (&#x27;io&#x27;, &#x27;Ido&#x27;),
 (&#x27;is&#x27;, &#x27;Icelandic&#x27;),
 (&#x27;it&#x27;, &#x27;Italian&#x27;),
 (&#x27;ja&#x27;, &#x27;Japanese&#x27;),
 (&#x27;ka&#x27;, &#x27;Georgian&#x27;),
 (&#x27;kab&#x27;, &#x27;Kabyle&#x27;),
 (&#x27;kk&#x27;, &#x27;Kazakh&#x27;),
 (&#x27;km&#x27;, &#x27;Khmer&#x27;),
 (&#x27;kn&#x27;, &#x27;Kannada&#x27;),
 (&#x27;ko&#x27;, &#x27;Korean&#x27;),
 (&#x27;ky&#x27;, &#x27;Kyrgyz&#x27;),
 (&#x27;lb&#x27;, &#x27;Luxembourgish&#x27;),
 (&#x27;lt&#x27;, &#x27;Lithuanian&#x27;),
 (&#x27;lv&#x27;, &#x27;Latvian&#x27;),
 (&#x27;mk&#x27;, &#x27;Macedonian&#x27;),
 (&#x27;ml&#x27;, &#x27;Malayalam&#x27;),
 (&#x27;mn&#x27;, &#x27;Mongolian&#x27;),
 (&#x27;mr&#x27;, &#x27;Marathi&#x27;),
 (&#x27;ms&#x27;, &#x27;Malay&#x27;),
 (&#x27;my&#x27;, &#x27;Burmese&#x27;),
 (&#x27;nb&#x27;, &#x27;Norwegian BokmÃ¥l&#x27;),
 (&#x27;ne&#x27;, &#x27;Nepali&#x27;),
 (&#x27;nl&#x27;, &#x27;Dutch&#x27;),
 (&#x27;nn&#x27;, &#x27;Norwegian Nynorsk&#x27;),
 (&#x27;os&#x27;, &#x27;Ossetic&#x27;),
 (&#x27;pa&#x27;, &#x27;Punjabi&#x27;),
 (&#x27;pl&#x27;, &#x27;Polish&#x27;),
 (&#x27;pt&#x27;, &#x27;Portuguese&#x27;),
 (&#x27;pt-br&#x27;, &#x27;Brazilian Portuguese&#x27;),
 (&#x27;ro&#x27;, &#x27;Romanian&#x27;),
 (&#x27;ru&#x27;, &#x27;Russian&#x27;),
 (&#x27;sk&#x27;, &#x27;Slovak&#x27;),
 (&#x27;sl&#x27;, &#x27;Slovenian&#x27;),
 (&#x27;sq&#x27;, &#x27;Albanian&#x27;),
 (&#x27;sr&#x27;, &#x27;Serbian&#x27;),
 (&#x27;sr-latn&#x27;, &#x27;Serbian Latin&#x27;),
 (&#x27;sv&#x27;, &#x27;Swedish&#x27;),
 (&#x27;sw&#x27;, &#x27;Swahili&#x27;),
 (&#x27;ta&#x27;, &#x27;Tamil&#x27;),
 (&#x27;te&#x27;, &#x27;Telugu&#x27;),
 (&#x27;tg&#x27;, &#x27;Tajik&#x27;),
 (&#x27;th&#x27;, &#x27;Thai&#x27;),
 (&#x27;tk&#x27;, &#x27;Turkmen&#x27;),
 (&#x27;tr&#x27;, &#x27;Turkish&#x27;),
 (&#x27;tt&#x27;, &#x27;Tatar&#x27;),
 (&#x27;udm&#x27;, &#x27;Udmurt&#x27;),
 (&#x27;ug&#x27;, &#x27;Uyghur&#x27;),
 (&#x27;uk&#x27;, &#x27;Ukrainian&#x27;),
 (&#x27;ur&#x27;, &#x27;Urdu&#x27;),
 (&#x27;uz&#x27;, &#x27;Uzbek&#x27;),
 (&#x27;vi&#x27;, &#x27;Vietnamese&#x27;),
 (&#x27;zh-hans&#x27;, &#x27;Simplified Chinese&#x27;),
 (&#x27;zh-hant&#x27;, &#x27;Traditional Chinese&#x27;)]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES_BIDI</td>
          <td class="code"><pre>[&#x27;he&#x27;, &#x27;ar&#x27;, &#x27;ar-dz&#x27;, &#x27;ckb&#x27;, &#x27;fa&#x27;, &#x27;ug&#x27;, &#x27;ur&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_CODE</td>
          <td class="code"><pre>&#x27;en-us&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_AGE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_NAME</td>
          <td class="code"><pre>&#x27;django_language&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_PATH</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_SAMESITE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>LOCALE_PATHS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING_CONFIG</td>
          <td class="code"><pre>&#x27;logging.config.dictConfig&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_REDIRECT_URL</td>
          <td class="code"><pre>&#x27;profile_home&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_URL</td>
          <td class="code"><pre>&#x27;/accounts/login/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LOGOUT_REDIRECT_URL</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MANAGERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_ROOT</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_URL</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>MESSAGE_STORAGE</td>
          <td class="code"><pre>&#x27;django.contrib.messages.storage.fallback.FallbackStorage&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE</td>
          <td class="code"><pre>[&#x27;django.middleware.security.SecurityMiddleware&#x27;,
 &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,
 &#x27;django.middleware.common.CommonMiddleware&#x27;,
 &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,
 &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,
 &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,
 &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>MIGRATION_MODULES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>MONTH_DAY_FORMAT</td>
          <td class="code"><pre>&#x27;F j&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>NUMBER_GROUPING</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_HASHERS</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PREPEND_WWW</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>ROOT_URLCONF</td>
          <td class="code"><pre>&#x27;Server_Configuration.urls&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SECRET_KEY</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SECRET_KEY_FALLBACKS</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_CONTENT_TYPE_NOSNIFF</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_CROSS_ORIGIN_OPENER_POLICY</td>
          <td class="code"><pre>&#x27;same-origin&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_INCLUDE_SUBDOMAINS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_PRELOAD</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_SECONDS</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_PROXY_SSL_HEADER</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REDIRECT_EXEMPT</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REFERRER_POLICY</td>
          <td class="code"><pre>&#x27;same-origin&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_HOST</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_REDIRECT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_EMAIL</td>
          <td class="code"><pre>&#x27;root@localhost&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_CACHE_ALIAS</td>
          <td class="code"><pre>&#x27;default&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_AGE</td>
          <td class="code"><pre>1209600</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_HTTPONLY</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_NAME</td>
          <td class="code"><pre>&#x27;sessionid&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_PATH</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SAMESITE</td>
          <td class="code"><pre>&#x27;Lax&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_ENGINE</td>
          <td class="code"><pre>&#x27;django.contrib.sessions.backends.db&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_FILE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SAVE_EVERY_REQUEST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SERIALIZER</td>
          <td class="code"><pre>&#x27;django.contrib.sessions.serializers.JSONSerializer&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SETTINGS_MODULE</td>
          <td class="code"><pre>&#x27;Server_Configuration.settings&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATETIME_FORMAT</td>
          <td class="code"><pre>&#x27;m/d/Y P&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATE_FORMAT</td>
          <td class="code"><pre>&#x27;m/d/Y&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SIGNING_BACKEND</td>
          <td class="code"><pre>&#x27;django.core.signing.TimestampSigner&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SILENCED_SYSTEM_CHECKS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_FINDERS</td>
          <td class="code"><pre>[&#x27;django.contrib.staticfiles.finders.FileSystemFinder&#x27;,
 &#x27;django.contrib.staticfiles.finders.AppDirectoriesFinder&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_STORAGE</td>
          <td class="code"><pre>&#x27;django.contrib.staticfiles.storage.StaticFilesStorage&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_ROOT</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_URL</td>
          <td class="code"><pre>&#x27;/static/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>STORAGES</td>
          <td class="code"><pre>{&#x27;default&#x27;: {&#x27;BACKEND&#x27;: &#x27;django.core.files.storage.FileSystemStorage&#x27;},
 &#x27;staticfiles&#x27;: {&#x27;BACKEND&#x27;: &#x27;django.contrib.staticfiles.storage.StaticFilesStorage&#x27;}}</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATES</td>
          <td class="code"><pre>[{&#x27;APP_DIRS&#x27;: True,
  &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,
  &#x27;DIRS&#x27;: [&#x27;/home/peder/Medication-Reminder-CEP2/Django Webserver/templates&#x27;],
  &#x27;OPTIONS&#x27;: {&#x27;context_processors&#x27;: [&#x27;django.template.context_processors.debug&#x27;,
                                     &#x27;django.template.context_processors.request&#x27;,
                                     &#x27;django.contrib.auth.context_processors.auth&#x27;,
                                     &#x27;django.contrib.messages.context_processors.messages&#x27;]}}]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_NON_SERIALIZED_APPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_RUNNER</td>
          <td class="code"><pre>&#x27;django.test.runner.DiscoverRunner&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>THOUSAND_SEPARATOR</td>
          <td class="code"><pre>&#x27;,&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_FORMAT</td>
          <td class="code"><pre>&#x27;P&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_INPUT_FORMATS</td>
          <td class="code"><pre>[&#x27;%H:%M:%S&#x27;, &#x27;%H:%M:%S.%f&#x27;, &#x27;%H:%M&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>TIME_ZONE</td>
          <td class="code"><pre>&#x27;UTC&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>USE_I18N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_L10N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_THOUSAND_SEPARATOR</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_TZ</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_HOST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_PORT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>WSGI_APPLICATION</td>
          <td class="code"><pre>&#x27;Server_Configuration.wsgi.application&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>X_FRAME_OPTIONS</td>
          <td class="code"><pre>&#x27;DENY&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>YEAR_MONTH_FORMAT</td>
          <td class="code"><pre>&#x27;F Y&#x27;</pre></td>
        </tr>
      
    </tbody>
  </table>

</div>

  <div id="explanation">
    <p>
      Youâ€™re seeing this error because you have <code>DEBUG = True</code> in your
      Django settings file. Change that to <code>False</code>, and Django will
      display a standard page generated by the handler for this status code.
    </p>
  </div>

</body>
</html>

